<?php 
namespace Free\Libs{use Component\Http\IFreeResponse; use Free\Libs\FreeException; final class FreeApplication{ private $_container; private $_module; private $_controller; private $_action; private $controller; private $action; private $_run_num = 1; public function __construct($container) { $this->_container = $container; $param = $container->getComponent('route',array('arguments'=> $container)); $this->_module = $param->route_m(); $this->_controller = $param->route_c(); $this->_action = $param->route_a(); } public function __destruct() { } public function run($m='',$c='',$a='') { $this->_run_num ++; if($this->_run_num > 10) { throw new FreeException('run extends the maximum','0'); } !empty($m) && $this->_module = $m; !empty($c) && $this->_controller = $c; !empty($a) && $this->_action = $a; $this->controller = $this->loadController(); $this->action = $this->_action. 'Action' ; if (method_exists($this->controller, $this->action)) { if (preg_match('/^[_]/i', $this->action)) { throw new FreeException('You are visiting the action is to protect the private action','404'); } else { $this->doFilter(); call_user_func(array($this->controller, 'doBefore')); $response = call_user_func(array($this->controller, $this->action)); call_user_func(array($this->controller, 'doAfter')); if($response instanceof IFreeResponse) { $response->sendResponse(); }else{ throw new FreeException('Controller must return response.',500); } } } else { throw new FreeException($this->action.'	Action does not exist.','404'); } } public function get() { return array($this->_module,$this->_controller,$this->_action); } private function loadController() { $filename = ucfirst($this->_controller); $classname = APP. DIRECTORY_SEPARATOR . 'Controller'. DIRECTORY_SEPARATOR .ucfirst($this->_module) . DIRECTORY_SEPARATOR . $filename . 'Controller'; if($controller = new $classname($this->_container)) { return $controller; }else{ return false; } } public function doFilter() { $filter = new FreeFilter($this->_container); $forward = $filter->handle(); if($forward !== false) { list($m,$c,$a) = explode('/',$forward ); $this->controller->forward($m,$c,$a); }else{ return true; } } public function getController() { return $this->controller ; } public function setController($controller) { $this->controller = $controller; } } class FreeController{ protected $_container; private $_templte; private $_out_put = array(); final public function __construct($container) { $this->_container = $container; $this->_init(); } public function _init() { } public function doBefore() { } public function doAfter() { } public function getModel($modelName) { return $this->_container->loadModel($modelName); } public function getComponent($componentName,$option=array()) { return $this->_container->getComponent($componentName,$option); } public function getCache() { return $this->_container->getComponent('cache',array('arguments'=>$this->_container)); } public function setContainer($container) { $this->_container = $container; } public function getContainer() { return $this->_container; } final public function assign($name,$value='') { if(is_array($name)) { $this->_out_put = array_merge($this->_out_put,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) $this->_out_put[$key] = $val; }else { $this->_out_put[$name] = $value; } } public function template($template,$data) { if(!$this->_templte) { $this->_templte = $this->_container->getComponent('template',array('arguments'=>$this->_container)); } $this->assign($data); $content = $this->_templte->render($template,$this->_out_put); $response = $this->_container->getComponent('response'); $response->setBody($content,'contentBody'); return $response; } } class FreeException extends \Exception { const ERROR_SYSTEM_ERROR = '0'; const ERROR_CLASS_NOT_EXIST = '100'; const ERROR_CLASS_TYPE_ERROR = '101'; const ERROR_CLASS_METHOD_NOT_EXIST = '102'; const ERROR_OBJECT_NOT_EXIST = '103'; const ERROR_PARAMETER_TYPE_ERROR = '110'; const ERROR_CONFIG_ERROR = '120'; const ERROR_RETURN_TYPE_ERROR = '130'; const ERROR_NOT_EXIST_HANDLE = '404'; const ERROR_NOT_EXIST_TEMPLATE = '104'; public function __construct($message, $code = 0) { $message = $this->buildMessage($message, $code); $file = $this->getFile(); $line = $this->getLine(); $trace = debug_backtrace(); include(FREE_PATH . 'free/Libs/view/error.php'); exit; } public function buildMessage($message, $code) { $message = str_replace(array("<br />", "<br>", "\r\n"), '', $message); eval('$message="' . addcslashes($this->messageMapper($code), '"') . '";'); return $message; } protected function messageMapper($code) { $messages = array( self::ERROR_SYSTEM_ERROR => 'System error \'$message\'.', self::ERROR_CLASS_TYPE_ERROR => 'Incorrect class type \'$message\'.', self::ERROR_CLASS_NOT_EXIST => 'Unable to create instance for \'$message\' , class is not exist.', self::ERROR_CLASS_METHOD_NOT_EXIST => 'Unable to access the method \'$message\' in current class , the method is not exist or is protected.', self::ERROR_OBJECT_NOT_EXIST => 'Unable to access the object in current class \'$message\' ', self::ERROR_CONFIG_ERROR => 'Incorrect config. the config about \'$message\' error.', self::ERROR_PARAMETER_TYPE_ERROR => 'Incorrect parameter type \'$message\'.', self::ERROR_RETURN_TYPE_ERROR => 'Incorrect return type for \'$message\'.', self::ERROR_NOT_EXIST_HANDLE => 'Incorrect handle type for \'$message\'.',); return isset($messages[$code]) ? $messages[$code] : '$message'; } }class FreeFilter { private $_container; private $_filters = array(); private $_is_handled = 0; public function __construct($container) { $this->_container = $container; $this->_init(); } public function handle() { if (count($this->_filters) < 1) { return false; } $this->_is_handled++; $forward = $this->getHandler(); return $forward; } public function getHandler() { foreach($this->_filters as $key => $val) { $filter = new $val(); $forward = $filter->handle(); unset($this->_filters[$key]); if($forward !== false) { return $forward; } } return false; } public function register($filter=array()) { is_array($filter) && $this->_filters += $filter; } public function remove($filter_name) { if(isset($this->_filters[$filter_name])) { unset($this->_filters[$filter_name]); } } private function _init() { $_filter = array( 'default_filter'=>'Component\Filter\FreeDefaultFilter', ); $app_config = $this->_container->loadConfig('application',APP); $this->_filters = isset($app_config['filter'])&&is_array($app_config['filter']) ? array_merge($_filter,$app_config['filter']) : $_filter; } } }
namespace Component\Route{class FreeDefaultRoute extends AbstractFreeRoute{ private $route_config = ''; private $_container; public function __construct($container) { $this->_container = $container; $config = $this->_container->loadConfig('application', APP); if(isset($config['route'])) { $route_config = explode('/',$config['route']); } $this->route_config['m'] = isset($route_config[0]) ? $route_config[0] : 'default'; $this->route_config['c'] = isset($route_config[1]) ? $route_config[1] : 'index'; $this->route_config['a'] = isset($route_config[2]) ? $route_config[2] : 'init'; return true; } public function route_m() { $m = isset($_GET['m']) && !empty($_GET['m']) ? $_GET['m'] : (isset($_POST['m']) && !empty($_POST['m']) ? $_POST['m'] : ''); if (empty($m)) { return $this->route_config['m']; } else { return $m; } } public function route_c() { $c = isset($_GET['c']) && !empty($_GET['c']) ? $_GET['c'] : (isset($_POST['c']) && !empty($_POST['c']) ? $_POST['c'] : ''); if (empty($c)) { return $this->route_config['c']; } else { return $c; } } public function route_a() { $a = isset($_GET['a']) && !empty($_GET['a']) ? $_GET['a'] : (isset($_POST['a']) && !empty($_POST['a']) ? $_POST['a'] : ''); if (empty($a)) { return $this->route_config['a']; } else { return $a; } } public function assemble($action, $args = '',$script='') { if(!empty($action)) { $r = explode('/',$action); } $route = array(); isset($r[0]) && !empty($r[0]) && $route['m'] = $r[0] ; isset($r[1]) && !empty($r[1]) && $route['c'] = $r[1] ; isset($r[2]) && !empty($r[2]) && $route['a'] = $r[2] ; $script == '' && $script = $this->_container->getComponent('request')->getScript(); return $script . '?' . (is_array($args) ? self::argsToUrl(array_merge($route, $args)) : (self::argsToUrl($route).$args)); } public static function argsToUrl($args, $encode = true, $separator = '&=') { if (strlen($separator) !== 2) return; $_tmp = ''; foreach ((array) $args as $key => $value) { $value = $encode ? rawurlencode($value) : $value; if (is_int($key)) { $value && $_tmp .= $value . $separator[0]; continue; } $key = ($encode ? rawurlencode($key) : $key); $_tmp .= $key . $separator[1] . $value . $separator[0]; } return trim($_tmp, $separator[0]); } } }
namespace Component\Template{require_once FREE_PATH .'free/Component/Template/Twig/Autoloader.php'; class FreeTwigTemplate { protected $_container; protected $_twig; private $data = array(); public function __construct($container) { $this->_container = $container; $config = $this->_container->loadConfig('application',APP); if(isset($config['template-path'])) { $path = FREE_PATH . $config['template-path']; }else{ $path = FREE_PATH . 'src' . DIRECTORY_SEPARATOR . APP . 'templates'; } \Twig_Autoloader::register(); $loader = new \Twig_Loader_Filesystem($path); $this->_twig = new \Twig_Environment($loader, array( 'cache' => FREE_PATH . '/caches/templates/compilation_cache', 'debug' => defined('FREE_RUNTIME') && FREE_RUNTIME, )); if(isset($config['Twig_extends'])) { $this->setExtends($config['Twig_extends']); } } public function render($template,$data = array()) { $template = $this->_twig->loadTemplate($template); is_array($data) && $this->data = array_merge($this->data,$data); return $template->render($this->data); } public function setData($data) { $this->data = $data; } public function setExtends($extend) { if(is_array($extend)) { foreach($extend as $e) { $this->_twig->addExtension(new $e($this->_container)); } }else{ $this->setExtends(array($extend)); } } }}
namespace Component\Cache{use Free\Libs\FreeException; class FreeFileCache extends AbstractFreeCache{ protected $_setting = array( 'suf' => '.cache.php', 'type' => 'array', 'file_path'=> 'caches/data/', ); protected $filepath = ''; protected $_container; public function __construct($container) { $this->_container = $container; $setting = $this->_container->loadConfig('cache','file'); $this->getSetting($setting); } public function set($name, $data, $module='common',$expire=1800) { if(!is_string($name)) { throw new FreeException('the name of FileCache must be string.','002'); } if(empty($module)) { throw new FreeException(' 3th parameter ','110'); } $filepath = FREE_PATH . $this->_setting['file_path'] . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR; $filename = $name.$this->_setting['suf']; if(!is_dir($filepath)) { mkdir($filepath, 0777, true); } if($this->_setting['type'] == 'array') { $data = "<?php\nreturn ".var_export($data, true).";\n?>"; } elseif($this->_setting['type'] == 'serialize') { $data = serialize($data); } if( $this->_container->loadConfig('system', 'lock_ex')) { $file_size = file_put_contents($filepath.$filename, $data, LOCK_EX); } else { $file_size = file_put_contents($filepath.$filename, $data); } return $file_size ? $file_size : 'false'; } public function get($name, $module) { if(empty($module)) { throw new FreeException(' 2th parameter ','110'); } $filepath = FREE_PATH . $this->_setting['file_path'] . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR; $filename = $name.$this->_setting['suf']; if (!file_exists($filepath.$filename)) { return false; } else { if($this->_setting['type'] == 'array') { $data = @require($filepath.$filename); } elseif($this->_setting['type'] == 'serialize') { $data = unserialize(file_get_contents($filepath.$filename)); } return $data; } } public function delete($name, $module) { if(empty($module)) { throw new FreeException(' 2th parameter ','110'); } $filepath = FREE_PATH . $this->_setting['file_path'] . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR; $filename = $name.$this->_setting['suf']; if(file_exists($filepath.$filename)) { return @unlink($filepath.$filename) ? true : false; } else { return false; } } public function getSetting($setting = '') { if($setting) { $this->_setting = array_merge($this->_setting, $setting); } } public function cacheinfo($name, $module='commons') { if(empty($module)) { throw new FreeException(' 4th parameter ','110'); } $filepath = FREE_PATH . $this->_setting['file_path'] . DIRECTORY_SEPARATOR . $module . DIRECTORY_SEPARATOR; $filename = $filepath.$name.$this->_setting['suf']; if(file_exists($filename)) { $res['filename'] = $name.$this->_setting['suf']; $res['filepath'] = $filepath; $res['filectime'] = filectime($filename); $res['filemtime'] = filemtime($filename); $res['filesize'] = filesize($filename); return $res; } else { return false; } } } }
namespace Component\Model\Db{final class FreeMysqlDb extends AbstractFreeDb { public $link = null; public $lastQueryId = null; public $queryCount = 0; protected $comparison = array('eq'=>'=','neq'=>'<>','gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<=','notlike'=>'NOT LIKE','like'=>'LIKE'); public function __construct($container) { $this->_container = $container; $config = $this->_container->loadConfig('database','oracle'); $this->open($config); } public function open($config) { $this->config = $config; if($config['autoconnect'] == 1) { $this->connect(); } } public function connect() { $func = $this->config['pconnect'] == 1 ? 'mysql_pconnect' : 'mysql_connect'; if(!$this->link = @$func($this->config['hostname'], $this->config['username'], $this->config['password'], 1)) { $this->halt('Can not connect to MySQL server'); return false; } if($this->version() > '4.1') { $charset = isset($this->config['charset']) ? $this->config['charset'] : ''; $serverset = $charset ? "character_set_connection='$charset',character_set_results='$charset',character_set_client=binary" : ''; $serverset .= $this->version() > '5.0.1' ? ((empty($serverset) ? '' : ',')." sql_mode='' ") : ''; $serverset && mysql_query("SET $serverset", $this->link); } if($this->config['database'] && !@mysql_select_db($this->config['database'], $this->link)) { $this->halt('Cannot use database '.$this->config['database']); return false; } $this->database = $this->config['database']; return $this->link; } protected function execute($sql) { if(!is_resource($this->link)) { $this->connect(); } $this->lastQueryId = mysql_query($sql, $this->link) or $this->halt(mysql_error(), $sql); $this->queryCount++; return $this->lastQueryId; } public function select($data, $table, $where = '', $limit = '', $order = '', $group = '', $key = '') { $where = $this->parseWhere($where); $where && $where = ' WHERE ' . $where . ' '; $order = $this->parseOrder($order); $order && $order = ' ORDER BY ' . $order; $group = $group == '' ? '' : ' GROUP BY '.$group; if(empty($data)) { $data = '*'; } if (is_array($data)) { array_walk($data, array($this, 'addSpecialChar')); $data = implode(',', $data); } else{ $field = explode(',', $data); array_walk($field, array($this, 'addSpecialChar')); $data = implode(',', $field); } $limit && $limit = ' limit ' . $limit; $sql = 'SELECT '.$data.' FROM `'.$this->config['database'].'`.`'.$table.'`'.$where.$group.$order.$limit; $this->execute($sql); if(!is_resource($this->lastQueryId)) { return $this->lastQueryId; } $datalist = array(); while(($rs = $this->fetchNext()) != false) { if($key) { $datalist[$rs[$key]] = $rs; } else { $datalist[] = $rs; } } $this->freeResult(); return $datalist; } public function getOne($data, $table, $where = '', $order = '', $group = '') { $where = $this->parseWhere($where); $where && $where = ' WHERE ' . $where . ' '; $order = $this->parseOrder($order); $order && $order = ' ORDER BY ' . $order; $group = $group == '' ? '' : ' GROUP BY '.$group; $limit = ' LIMIT 1'; if(empty($data)) { $data = '*'; } if (is_array($data)) { array_walk($data, array($this, 'addSpecialChar')); $data = implode(',', $data); } else{ $field = explode(',', $data); array_walk($field, array($this, 'addSpecialChar')); $data = implode(',', $field); } $sql = 'SELECT '.$data.' FROM `'.$this->config['database'].'`.`'.$table.'`'.$where.$group.$order.$limit; $this->execute($sql); $res = $this->fetchNext(); $this->freeResult(); return $res; } public function fetchNext($type=MYSQL_ASSOC) { $res = mysql_fetch_array($this->lastQueryId, $type); if(!$res) { $this->freeResult(); } return $res; } public function freeResult() { if(is_resource($this->lastQueryId)) { mysql_free_result($this->lastQueryId); $this->lastQueryId = null; } } public function insert($data, $table, $return_insertId = false, $replace = false) { if(!is_array( $data ) || $table == '' || count($data) == 0) { return false; } $fielddata = array_keys($data); $valuedata = array_values($data); array_walk($fielddata, array($this, 'addSpecialChar')); array_walk($valuedata, array($this, 'escapeString')); $field = implode (',', $fielddata); $value = implode (',', $valuedata); $cmd = $replace ? 'REPLACE INTO' : 'INSERT INTO'; $sql = $cmd.' `'.$this->config['database'].'`.`'.$table.'`('.$field.') VALUES ('.$value.')'; $return = $this->execute($sql); $this->toLog($sql); return $return_insertId ? $this->insertId() : $return; } public function insertId($table) { return mysql_insert_id($this->link); } public function update($data, $table, $where = '') { $where = $this->parseWhere($where); if(empty($table) or empty($where) or empty($data)) { return false; } $where = ' WHERE '.$where; $field = $this->parseSet($data); $sql = 'UPDATE `'.$this->config['database'].'`.`'.$table.'` SET '.$field.$where; $this->toLog($sql); return $this->execute($sql); } public function delete($table, $where) { if ($table == '' || $where == '') { return false; } $where = $this->parseWhere($where); $where && $where = ' WHERE ' . $where . ' '; $sql = 'DELETE FROM `'.$this->config['database'].'`.`'.$table.'`'.$where; $this->toLog($sql); return $this->execute($sql); } public function affectedRows() { return mysql_affected_rows($this->link); } public function getPrimary($table) { $this->execute("SHOW COLUMNS FROM $table"); while($r = $this->fetchNext()) { if($r['Key'] == 'PRI') break; } return $r['Field']; } public function getFields($table) { $fields = array(); $this->execute("SHOW FULL COLUMNS FROM $table"); while($r = $this->fetchNext()) { $fields[$r['Field']] = $r; } return $fields; } public function checkFields($table, $array) { $fields = $this->getFields($table); $nofields = array(); foreach($array as $v) { if(!array_key_exists($v, $fields)) { $nofields[] = $v; } } return $nofields; } public function tableExists($table) { $tables = $this->listTables(); return in_array($table, $tables) ? 1 : 0; } public function listTables() { $tables = array(); $this->execute("SHOW TABLES"); while($r = $this->fetchNext()) { $tables[] = $r['Tables_in_'.$this->config['database']]; } return $tables; } public function fieldExists($table, $field) { $fields = $this->getFields($table); return array_key_exists($field, $fields); } public function numRows($sql) { $this->lastQueryId = $this->execute($sql); return mysql_num_rows($this->lastQueryId); } public function numFields($sql) { $this->lastQueryId = $this->execute($sql); return mysql_num_fields($this->lastQueryId); } public function result($sql, $row) { $this->lastQueryId = $this->execute($sql); return @mysql_result($this->lastQueryId, $row); } public function error() { return @mysql_error($this->link); } public function errno() { return intval(@mysql_errno($this->link)) ; } public function version() { if(!is_resource($this->link)) { $this->connect(); } return mysql_get_server_info($this->link); } public function close() { if (is_resource($this->link)) { @mysql_close($this->link); } } public function halt($message = '', $sql = '') { $this->errormsg = "<b>MySQL Query : </b> $sql <br /><b> MySQL Error : </b>".$this->error()." <br /> <b>MySQL Errno : </b>".$this->errno()." <br /><b> Message : </b> $message <br />"; $msg = $this->errormsg; echo '<div style="font-size:12px;text-align:left; border:1px solid #9cc9e0; padding:1px 4px;color:#000000;font-family:Arial, Helvetica,sans-serif;"><span>'.$msg.'</span></div>'; exit; } public function addSpecialChar(&$value) { if('*' == $value || false !== strpos($value, '(') || false !== strpos($value, '.') || false !== strpos ( $value, '`')) { } else { $value = '`'.trim($value).'`'; } return $value; } public function escapeString(&$value, $key='', $quotation = 1) { if($this->_linkID) { $value = mysql_real_escape_string($value,$this->_linkID); }else{ $value = mysql_escape_string($value); } if ($quotation) { $q = '\''; } else { $q = ''; } $value = $q.$value.$q; return $value; } public function parseOrder($order) { if(is_array($order)) { $array = array(); foreach ($order as $key=>$val){ if(is_numeric($key)) { $array[] = $val; }else{ $array[] = '`' . $key . '` '.$val; } } $order = implode(',',$array); } return !empty($order)? $order:''; } public function createFormSql($form_name,$fields) { $sql = "CREATE TABLE IF NOT EXISTS `t_{$form_name}` \n ( \n   `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '字段ID',\n"; foreach($fields as $key => $field) { $sql .= "   `{$field['name']}` {$field['type']} "; isset($field['default_value']) && $sql .= " default '{$field['default_value']}' "; $sql .= " COMMENT '{$field['tips']}',\n"; } $sql .= "   PRIMARY KEY (`ID`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;"; return $sql; } public function createForm($form_name,$fields) { $sql = $this->createFormSql($form_name,$fields); return $this->execute($sql); } }}
namespace Component\Http{class FreeHttpRequest implements IFreeRequest { protected $_port = null; protected $_hostInfo = null; protected $_clientIp = null; protected $_language = null; protected $_pathInfo = null; protected $_attribute = array(); private $_scriptUrl = null; private $_requestUri = null; private $_baseUrl = null; public function setAttribute($data, $key = '') { if ($key) { $this->_attribute[$key] = $data; return; } if (is_object($data)) $data = get_object_vars($data); if (is_array($data)) $this->_attribute = array_merge($this->_attribute, $data); } public function getAttribute($key, $defaultValue = '') { if (isset($this->_attribute[$key])) return $this->_attribute[$key]; else if (isset($_GET[$key])) return $_GET[$key]; else if (isset($_POST[$key])) return $_POST[$key]; else if (isset($_COOKIE[$key])) return $_COOKIE[$key]; else if (isset($_REQUEST[$key])) return $_REQUEST[$key]; else if (isset($_ENV[$key])) return $_ENV[$key]; else if (isset($_SERVER[$key])) return $_SERVER[$key]; else return $defaultValue; } public function getRequest($key = null, $defaultValue = null) { if (!$key) return array_merge($_POST, $_GET); if (isset($_GET[$key])) return $_GET[$key]; if (isset($_POST[$key])) return $_POST[$key]; return $defaultValue; } public function getPost($name = null, $defaultValue = null) { if ($name === null) return $_POST; return isset($_POST[$name]) ? $_POST[$name] : $defaultValue; } public function getGet($name = NULL, $defaultValue = null) { if ($name === null) return $_GET; return (isset($_GET[$name])) ? $_GET[$name] : $defaultValue; } public function getCookie($name = null, $defaultValue = null) { if ($name === null) return $_COOKIE; return (isset($_COOKIE[$name])) ? $_COOKIE[$name] : $defaultValue; } public function getSession($name = null, $defaultValue = null) { if ($name === null) return $_SESSION; return (isset($_SESSION[$name])) ? $_SESSION[$name] : $defaultValue; } public function getServer($name = null, $defaultValue = null) { if ($name === null) return $_SERVER; return (isset($_SERVER[$name])) ? $_SERVER[$name] : $defaultValue; } public function getEnv($name = null, $defaultValue = null) { if ($name === null) return $_ENV; return (isset($_ENV[$name])) ? $_ENV[$name] : $defaultValue; } public function getScheme() { return ($this->getServer('HTTPS') == 'on') ? 'https' : 'http'; } public function getProtocol() { return $this->getServer('SERVER_PROTOCOL', 'HTTP/1.0'); } public function getClientIp() { if (!$this->_clientIp) $this->_getClientIp(); return $this->_clientIp; } public function getRequestMethod() { return strtoupper($this->getServer('REQUEST_METHOD')); } public function getRequestType() { return 'web'; } public function getIsAjaxRequest() { return !strcasecmp($this->getServer('HTTP_X_REQUESTED_WITH'), 'XMLHttpRequest'); } public function isSecure() { return !strcasecmp($this->getServer('HTTPS'), 'on'); } public function isGet() { return !strcasecmp($this->getRequestMethod(), 'GET'); } public function isPost() { return !strcasecmp($this->getRequestMethod(), 'POST'); } public function isPut() { return !strcasecmp($this->getRequestMethod(), 'PUT'); } public function isDelete() { return !strcasecmp($this->getRequestMethod(), 'Delete'); } public function getRequestUri() { if (!$this->_requestUri) $this->_initRequestUri(); return $this->_requestUri; } public function getScriptUrl() { if (!$this->_scriptUrl) $this->_initScriptUrl(); return $this->_scriptUrl; } public function getScript() { if (($pos = strrpos($this->getScriptUrl(), '/')) === false) $pos = -1; return substr($this->getScriptUrl(), $pos + 1); } public function getHeader($header, $default = null) { $temp = strtoupper(str_replace('-', '_', $header)); if (substr($temp, 0, 5) != 'HTTP_') $temp = 'HTTP_' . $temp; if (($header = $this->getServer($temp)) != null) return $header; if (function_exists('apache_request_headers')) { $headers = apache_request_headers(); if ($headers[$header]) return $headers[$header]; } return $default; } public function getPathInfo() { if (!$this->_pathInfo) $this->_initPathInfo(); return $this->_pathInfo; } public function getBaseUrl($absolute = false) { if ($this->_baseUrl === null) $this->_baseUrl = rtrim(dirname($this->getScriptUrl()), '\\/.'); return $absolute ? $this->getHostInfo() . $this->_baseUrl : $this->_baseUrl; } public function getHostInfo() { if ($this->_hostInfo === null) $this->_initHostInfo(); return $this->_hostInfo; } public function getServerName() { return $this->getServer('SERVER_NAME', ''); } public function getServerPort() { if (!$this->_port) { $_default = $this->isSecure() ? 443 : 80; $this->setServerPort($this->getServer('SERVER_PORT', $_default)); } return $this->_port; } public function setServerPort($port) { $this->_port = (int) $port; } public function getRemoteHost() { return $this->getServer('REMOTE_HOST'); } public function getUrlReferer() { return $this->getServer('HTTP_REFERER'); } public function getRemotePort() { return $this->getServer('REMOTE_PORT'); } public function getUserAgent() { return $this->getServer('HTTP_USER_AGENT', ''); } public function getAcceptTypes() { return $this->getServer('HTTP_ACCEPT', ''); } public function getAcceptCharset() { return $this->getServer('HTTP_ACCEPT_ENCODING', ''); } public function getAcceptLanguage() { if (!$this->_language) { $_language = explode(',', $this->getServer('HTTP_ACCEPT_LANGUAGE', '')); $this->_language = $_language[0] ? $_language[0] : 'zh-cn'; } return $this->_language; } public function getResponse() { $response = new WindHttpResponse(); $response->setHeader('Content-type', 'text/html;charset=utf8'); return $response; } private function _getClientIp() { if (($ip = $this->getServer('HTTP_CLIENT_IP')) != null) { $this->_clientIp = $ip; } elseif (($_ip = $this->getServer('HTTP_X_FORWARDED_FOR')) != null) { $ip = strtok($_ip, ','); do { $ip = ip2long($ip); if (!(($ip == 0) || ($ip == 0xFFFFFFFF) || ($ip == 0x7F000001) || (($ip >= 0x0A000000) && ($ip <= 0x0AFFFFFF)) || (($ip >= 0xC0A8FFFF) && ($ip <= 0xC0A80000)) || (($ip >= 0xAC1FFFFF) && ($ip <= 0xAC100000)))) { $this->_clientIp = long2ip($ip); return; } } while (($ip = strtok(','))); } elseif (($ip = $this->getServer('HTTP_PROXY_USER')) != null) { $this->_clientIp = $ip; } elseif (($ip = $this->getServer('REMOTE_ADDR')) != null) { $this->_clientIp = $ip; } else { $this->_clientIp = "0.0.0.0"; } } private function _initRequestUri() { if (($requestUri = $this->getServer('HTTP_X_REWRITE_URL')) != null) { $this->_requestUri = $requestUri; } elseif (($requestUri = $this->getServer('REQUEST_URI')) != null) { $this->_requestUri = $requestUri; if (strpos($this->_requestUri, $this->getServer('HTTP_HOST')) !== false) $this->_requestUri = preg_replace( '/^\w+:\/\/[^\/]+/', '', $this->_requestUri); } elseif (($requestUri = $this->getServer('ORIG_PATH_INFO')) != null) { $this->_requestUri = $requestUri; if (($query = $this->getServer('QUERY_STRING')) != null) $this->_requestUri .= '?' . $query; } else throw new WindException(__CLASS__ . ' is unable to determine the request URI.'); } private function _initScriptUrl() { if (($scriptName = $this->getServer('SCRIPT_FILENAME')) == null) { throw new WindException(__CLASS__ . ' determine the entry script URL failed!!!'); } $scriptName = basename($scriptName); if (($_scriptName = $this->getServer('SCRIPT_NAME')) != null && basename($_scriptName) === $scriptName) { $this->_scriptUrl = $_scriptName; } elseif (($_scriptName = $this->getServer('PHP_SELF')) != null && basename($_scriptName) === $scriptName) { $this->_scriptUrl = $_scriptName; } elseif (($_scriptName = $this->getServer('ORIG_SCRIPT_NAME')) != null && basename($_scriptName) === $scriptName) { $this->_scriptUrl = $_scriptName; } elseif (($pos = strpos($this->getServer('PHP_SELF'), '/' . $scriptName)) !== false) { $this->_scriptUrl = substr($this->getServer('SCRIPT_NAME'), 0, $pos) . '/' . $scriptName; } elseif (($_documentRoot = $this->getServer('DOCUMENT_ROOT')) != null && ($_scriptName = $this->getServer( 'SCRIPT_FILENAME')) != null && strpos($_scriptName, $_documentRoot) === 0) { $this->_scriptUrl = str_replace('\\', '/', str_replace($_documentRoot, '', $_scriptName)); } else throw new WindException(__CLASS__ . ' determine the entry script URL failed!!'); } private function _initHostInfo() { $http = $this->isSecure() ? 'https' : 'http'; if (($httpHost = $this->getServer('HTTP_HOST')) != null) $this->_hostInfo = $http . '://' . $httpHost; elseif (($httpHost = $this->getServer('SERVER_NAME')) != null) { $this->_hostInfo = $http . '://' . $httpHost; if (($port = $this->getServerPort()) != null) $this->_hostInfo .= ':' . $port; } else throw new WindException(__CLASS__ . ' determine the entry script URL failed!!'); } private function _initPathInfo() { $requestUri = $this->getRequestUri(); $scriptUrl = $this->getScriptUrl(); $baseUrl = $this->getBaseUrl(); if (strpos($requestUri, $scriptUrl) === 0) $pathInfo = substr($requestUri, strlen($scriptUrl)); elseif ($baseUrl === '' || strpos($requestUri, $baseUrl) === 0) $pathInfo = substr($requestUri, strlen($baseUrl)); elseif (strpos($_SERVER['PHP_SELF'], $scriptUrl) === 0) $pathInfo = substr($_SERVER['PHP_SELF'], strlen($scriptUrl)); else throw new WindException(__CLASS__ . ' determine the entry path info failed!!'); if (($pos = strpos($pathInfo, '?')) !== false) $pathInfo = substr($pathInfo, $pos + 1); $this->_pathInfo = trim($pathInfo, '/'); } private function _stripSlashes(&$data) { return is_array($data) ? array_map(array($this, '_stripSlashes'), $data) : stripslashes($data); } public function setGet($key,$value) { $_GET[$key] = $value; } }}
namespace Component\Http{class FreeHttpResponse implements IFreeResponse { const W_CONTINUE = 100; const W_SWITCHING_PROTOCOLS = 101; const W_OK = 200; const W_CREATED = 201; const W_ACCEPTED = 202; const W_NON_AUTHORITATIVE_INFORMATION = 203; const W_NO_CONTENT = 204; const W_RESET_CONTENT = 205; const W_PARTIAL_CONTENT = 206; const W_MULTIPLE_CHOICES = 300; const W_MOVED_PERMANENTLY = 301; const W_MOVED_TEMPORARILY = 302; const W_FOUND = 302; const W_SEE_OTHER = 303; const W_NOT_MODIFIED = 304; const W_USE_PROXY = 305; const W_TEMPORARY_REDIRECT = 307; const W_BAD_REQUEST = 400; const W_UNAUTHORIZED = 401; const W_PAYMENT_REQUIRED = 402; const W_FORBIDDEN = 403; const W_NOT_FOUND = 404; const W_METHOD_NOT_ALLOWED = 405; const W_NOT_ACCEPTABLE = 406; const W_PROXY_AUTHENTICATION_REQUIRED = 407; const W_REQUEST_TIMEOUT = 408; const W_CONFLICT = 409; const W_GONE = 410; const W_LENGTH_REQUIRED = 411; const W_PRECONDITION_FAILED = 412; const W_REQUEST_ENTITY_TOO_LARGE = 413; const W_REQUEST_URI_TOO_LONG = 414; const W_UNSUPPORTED_MEDIA_TYPE = 415; const W_REQUESTED_RANGE_NOT_SATISFIABLE = 416; const W_EXPECTATION_FAILED = 417; const W_INTERNAL_SERVER_ERROR = 500; const W_NOT_IMPLEMENTED = 501; const W_BAD_GATEWAY = 502; const W_SERVICE_UNAVAILABLE = 503; const W_GATEWAY_TIMEOUT = 504; const W_HTTP_VERSION_NOT_SUPPORTED = 505; protected $_bodyIndex = array(); private $_headers = array(); private $_isRedirect = false; private $_status = ''; private $_type = ''; protected $_body = array(); protected $_charset = 'utf-8'; protected $_data = array(); public function getResponseType() { return $this->_type; } public function setResponseType($responseType) { $this->_type = $responseType; } public function setHeader($name, $value, $replace = false) { if (!$name || !$value) return; $name = $this->_normalizeHeader($name); $setted = false; foreach ($this->_headers as $key => $one) { if ($one['name'] == $name) { $this->_headers[$key] = array('name' => $name, 'value' => $value, 'replace' => $replace); $setted = true; break; } } if ($setted === false) $this->_headers[] = array('name' => $name, 'value' => $value, 'replace' => $replace); } public function addHeader($name, $value, $replace = false) { if ($name == '' || $value == '') return; $name = $this->_normalizeHeader($name); $this->_headers[] = array('name' => $name, 'value' => $value, 'replace' => $replace); } public function setStatus($status, $message = '') { $status = intval($status); if ($status < 100 || $status > 505) return; $this->_status = (int) $status; } public function setBody($content, $name = 'default') { if (!$content || !$name) return; array_push($this->_bodyIndex, $name); $this->_body[$name] = $content; } public function sendRedirect($location, $status = 302) { if (!is_int($status) || $status < 300 || $status > 399) return; $this->addHeader('Location', $location, true); $this->setStatus($status); $this->_isRedirect = true; $this->sendHeaders(); exit(); } public function sendError($status = self::W_NOT_FOUND, $message = '') { if (!is_int($status) || $status < 400 || $status > 505) return; $this->setBody($message, 'error'); $this->setStatus($status); $this->sendResponse(); } public function sendResponse() { $this->sendHeaders(); $this->sendBody(); } public function sendHeaders() { if ($this->isSendedHeader()) return; foreach ($this->_headers as $header) { header($header['name'] . ': ' . $header['value'], $header['replace']); } if ($this->_status) { header('HTTP/1.x ' . $this->_status . ' ' . ucwords($this->codeMap($this->_status))); header('Status: ' . $this->_status . ' ' . ucwords($this->codeMap($this->_status))); } } public function sendBody() { foreach ($this->_bodyIndex as $key) echo $this->_body[$key]; } public function getBody($name = false) { if ($name === false) { ob_start(); $this->sendBody(); return ob_get_clean(); } elseif ($name === true) { return $this->_body; } elseif (is_string($name) && isset($this->_body[$name])) return $this->_body[$name]; return null; } public function isSendedHeader($throw = false) { $sended = headers_sent($file, $line); if ($throw && $sended) throw new FreeException( __CLASS__ . ' the headers are sent in file ' . $file . ' on line ' . $line); return $sended; } public function getHeaders() { return $this->_headers; } public function clearBody() { $this->_body = array(); } public function clearHeaders() { $this->_headers = array(); } public function getCharset() { return $this->_charset; } public function setCharset($_charset) { $this->_charset = $_charset; } public function getData() { $_tmp = $this->_data; foreach (func_get_args() as $arg) { if (is_array($_tmp) && isset($_tmp[$arg])) $_tmp = $_tmp[$arg]; else return ''; } return $_tmp; } public function setData($data, $key = '', $merge = false) { if ($key) { if ($merge && !empty($this->_data[$key])) { $this->_data[$key] = FreeUtility::mergeArray((array) $this->_data[$key], (array) $data); } else $this->_data[$key] = $data; } else { if (is_object($data)) $data = get_object_vars($data); if (is_array($data)) $this->_data = array_merge($this->_data, $data); } } public function codeMap($code) { $maps = array( 505 => 'http version not supported', 504 => 'gateway timeout', 503 => 'service unavailable', 503 => 'bad gateway', 502 => 'bad gateway', 501 => 'not implemented', 500 => 'internal server error', 417 => 'expectation failed', 416 => 'requested range not satisfiable', 415 => 'unsupported media type', 414 => 'request uri too long', 413 => 'request entity too large', 412 => 'precondition failed', 411 => 'length required', 410 => 'gone', 409 => 'conflict', 408 => 'request timeout', 407 => 'proxy authentication required', 406 => 'not acceptable', 405 => 'method not allowed', 404 => 'not found', 403 => 'forbidden', 402 => 'payment required', 401 => 'unauthorized', 400 => 'bad request', 300 => 'multiple choices', 301 => 'moved permanently', 302 => 'moved temporarily', 302 => 'found', 303 => 'see other', 304 => 'not modified', 305 => 'use proxy', 307 => 'temporary redirect', 100 => 'continue', 101 => 'witching protocols', 200 => 'ok', 201 => 'created', 202 => 'accepted', 203 => 'non authoritative information', 204 => 'no content', 205 => 'reset content', 206 => 'partial content'); return isset($maps[$code]) ? $maps[$code] : ''; } private function _normalizeHeader($name) { $filtered = str_replace(array('-', '_'), ' ', (string) $name); $filtered = ucwords(strtolower($filtered)); $filtered = str_replace(' ', '-', $filtered); return $filtered; } }}
namespace Component\Session{class FreeFileSession { function __construct() { $path = FREE_PATH .'caches/sessions'; ini_set('session.save_handler', 'files'); session_save_path($path); session_start(); } } }
namespace Component\Model\Db{class FreeMongoDb extends AbstractFreeDb{ protected $_db = null; protected $_collection = null; protected $_db_name = ''; protected $_collection_name = ''; protected $_cursor = null; protected $comparison = array('neq'=>'ne','ne'=>'ne','gt'=>'gt','egt'=>'gte','gte'=>'gte','lt'=>'lt','elt'=>'lte','lte'=>'lte','in'=>'in','not in'=>'nin','nin'=>'nin'); protected $timeout = 200; public function __construct($container) { if (!class_exists('Mongo')) { throw new FreeException("The MongoDB PECL extension has not been installed or enabled",'100'); } $configs =Free::loadConfig("cache","mongo_db"); $num = count($configs['connect']); $configs['timeout'] && $this->timeout = $configs['timeout']; $keys = Free::loadConfig('double'); $this->key = intval($keys['mongo_db']); $this->config = $configs['connect'][$this->key]; $status = $this->connect(); if($status == false) { for($i = 1; $i < $num; $i++) { $n = $this->key + $i; $key = $n >= $num ? $n - $num : $n; $this->config = $configs['connect'][$key]; $status = $this->connect(); if($status!=false) { $keys['mongo_db'] = $key ; $this->key = $key; $data = "<?php\nreturn ".var_export($keys, true).";\n?>"; file_put_contents(FREE_PATH.'configs/double.php', $data); break; } } } if($status==false) { throw new FreeException("mongoDB not connect",'502'); } } function __destruct() { if($this->connection) { $this->connection->close(); } } public function connect($config='') { if ( !isset($this->link) ) { if(empty($config)) $config = $this->config; $host = 'mongodb://' .($config['username']?"{$config['username']}":'') .($config['password']?":{$config['password']}@":'') .$config['hostname'].($config['port']?":{$config['port']}":''); $this->_db_name = $this->config['database']; try{ $options = array('connect'=>true,'timeout'=>$this->timeout); $this->link = new mongo( $host,$options); $this->_db = $this->link->{$this->_db_name}; }catch (MongoConnectionException $e){ return false; } } return $this->link; } public function switchDb($db=''){ try{ if(empty($db)) { if(!$this->_mongo) { $this->_db_name = $this->config['database']; $this->_db = $this->link->{$this->_db_name}; } }else{ $this->_db_name =$db; $this->_db = $this->link->{$this->_db_name}; } return $this->_db; }catch (MongoException $e){ throw new FreeException("$e->getMessage()",'502'); } } public function select($data, $table, $where = array(), $limit = '', $order = array(), $group = '', $key = '') { if (empty($table)) { throw new FreeException("No Mongo collection selected to insert into",'500'); } $results = array(); $where = $this->parseWhere($where); $data = $this->parseField($data); list($offset,$limit) = $this->parseLimit($limit); $order = $this->parseOrder($order); try{ $documents = $this->_db->{$table}->find($where, $data)->limit((int) $limit)->skip((int) $offset)->sort($order); }catch(MongoCursorException $e){ throw new FreeException("select of data into MongoDB failed: {$e->getMessage()}",'502'); } $returns = array(); foreach ($documents as $doc) { if($key) { $returns[$doc[$key]] = $doc; } else { $returns[] = $doc; } } return $returns; } public function getOne($data, $table, $where = array(), $order = array(), $group = '') { if (empty($table)) { throw new FreeException("No Mongo collection selected to insert into",'500'); } $results = array(); $where = $this->parseWhere($where); $data = $this->parseField($data); $order = $this->parseOrder($order); $results = array(); try{ $documents = $this->_db->{$table}->find($where, $data)->limit(1)->skip(0); }catch(MongoCursorException $e){ throw new FreeException("getone of data into MongoDB failed: {$e->getMessage()}",'502'); } $returns = array(); foreach ($documents as $doc) { $returns[] = $doc; } return $returns[0]; } public function update($data, $table, $where = array()) { $where = $this->parseWhere($where); $data = $this->parseSet($data); if (empty($data)) { $this->error("No Mongo collection selected to update", 500); } if (count($data) == 0 || !is_array($data)) { $this->error("Nothing to update in Mongo collection or update is not an array", 500); } try { $this->_db->{$table}->update($where, $data, array('fsync' => TRUE, 'multiple' => FALSE)); return(TRUE); } catch (MongoCursorException $e) { throw new FreeException("Update of data into MongoDB failed: {$e->getMessage()}", 500); } } public function insert($data, $table, $return_insertId = false, $relpace = false) { if (empty($table)) { throw new FreeException("No Mongo collection selected to insert into",'500'); } if (count($data) == 0 || !is_array($data)) { throw new FreeException("Nothing to insert into Mongo collection or insert is not an array",'500'); } try { $data['ID'] = $this->getMongoAutoId($table); $this->_db->{$table}->insert($data, array('fsync' => TRUE)); return $data['ID']; } catch (MongoCursorException $e) { throw new FreeException("Insert of data into MongoDB failed: {$e->getMessage()}",'500'); } } public function count($table,$where = array()) { $where = $this->parseWhere($where); if (empty($table)) { throw new FreeException("In order to retreive a count of documents from MongoDB, a collection name must be passed", 500); } $count = $this->_db->{$table}->find($where)->limit(99999999)->skip(0)->count(); return($count); } public function query($command,$key='') { $this->queryStr = 'command:'.json_encode($command); $result = $this->_db->command($command); if(!$result['ok']) { throw new FreeException($result['errmsg']); } return $result; } public function execute($code,$args=array()) { $result = $this->_db->execute($code,$args); if($result['ok']) { return $result['retval']; }else{ throw new FreeException($result['errmsg'],500); } } public function close() { if($this->link) { $this->link->close(); $this->_db = null; $this->_collection = null; $this->_cursor = null; } } public function error() { $this->error = $this->_db->lastError(); return $this->error; } public function mongoNextId($table,$pk) { try{ $pk ='ID'; $result = $this->_db->{$table}->find(array(),array($pk=>1))->sort(array($pk=>-1))->limit(1); } catch (MongoCursorException $e) { throw new FreeException($e->getMessage(),500); } $data = $result->getNext(); return isset($data[$pk])?$data[$pk]+1:1; } public function delete($table, $where) { if (empty($table)) { throw new FreeException("No Mongo collection selected to delete from", 500); } try { $where = $this->parseWhere($where); $this->_db->{$table}->remove($where, array('fsync' => TRUE)); return(TRUE); } catch (MongoCursorException $e) { throw new FreeException("Delete of data into MongoDB failed: {$e->getMessage()}", 502); } } public function fetchNext($type='') { throw new FreeException("MongoDb Does not support this method :{__METHOD__}", 502); return false; } public function insertId($table_name) { throw new FreeException("MongoDb Does not support this method :{__METHOD__}", 502); return 0; } public function affectedRows() { throw new FreeException("MongoDb Does not support this method :{__METHOD__}", 502); return false; } public function freeResult() { $this->_cursor = null; } public function errno() { throw new FreeException("MongoDb Does not support this method :{__METHOD__}", 502); return false; } public function version() { throw new FreeException("MongoDb Does not support this method :{__METHOD__}", 502); return ''; } public function addSpecialChar(&$value) { return $value; } public function escapeString(&$value, $key='', $quotation = 1) { return $value; } public function getPrimary($table) { return 'ID'; } public function getFields($table=''){ if(empty($table)) { throw new FreeException("No Mongo collection selected to delete from", 500); } try{ $result = $this->_db->{$table}->findOne(); } catch (MongoCursorException $e) { throw new FreeException($e->getMessage(),500); } if($result) { $info = array(); foreach ($result as $key=>$val){ $info[$key] = array( 'name'=>$key, 'type'=>getType($val), ); } return $info; } return false; } public function checkFields($table, $array) { $fields = $this->getFields($table); $nofields = array(); foreach($array as $v) { if(!array_key_exists($v, $fields)) { $nofields[] = $v; } } return $nofields; } public function fieldExists($table, $field) { $fields = $this->getFields($table); return array_key_exists($field, $fields); } public function tableExists($table) { $tables = $this->listTables(); return in_array($table, $tables) ? 1 : 0; } public function listTables(){ $list = $this->_db->listCollections(); $info = array(); foreach ($list as $collection){ $info[] = $collection->getName(); } return $info; } public function parseSet($data) { $fields = array(); foreach($data as $key =>$v) { $key = strtoupper($key); switch (substr($v, 0, 2)) { case '+=': case '-=': $v = substr($v,2); $fields['$inc'][$key] = (int)$v; break; default: $fields['$set'][$key] = $v; } } return $fields; } public function parseOrder($order) { if(empty($order)) { return array(); } if(is_string($order)) { $array = explode(',',$order); $order = array(); foreach ($array as $key=>$val){ $arr = explode(' ',trim($val)); if(isset($arr[1])) { $arr[1] = strtolower($arr[1])=='asc'?1:-1; }else{ $arr[1] = 1; } $order[strtoupper($arr[0])] = $arr[1]; } }else{ foreach($order as $key => $val) { $order[strtoupper($key)] = strtolower($val)=='asc'?1:-1; } } return $order; } public function parseLimit($limit) { if(strpos($limit,',')) { $array = explode(',',$limit); }else{ $array = array(0,$limit); } return $array; } public function parseField($fields){ if(empty($fields)) { $fields = array(); } if(is_string($fields)) { $fields = explode(',',$fields); } $returns = array(); foreach($fields as $key =>$val) { $returns[strtoupper($key)] = $val; } return $returns; } public function parseWhere($where){ $query = array(); if(isset($where['_logic'])) { $operate = strtolower($where['_logic']); unset($where['_logic']); } foreach ($where as $key=>$val){ if('_id' != $key && 0===strpos($key,'_')) { $query = $this->parseThinkWhere($key,$val); }else{ if(!preg_match('/^[A-Z_\|\&\-.a-z0-9]+$/',trim($key))){ throw new FreeException('wrong where','502'); } $key = trim($key); if(strpos($key,'|')) { $array = explode('|',$key); $str = array(); foreach ($array as $k){ $str[] = $this->parseWhereItem($k,$val); } $query['$or'] = $str; }elseif(strpos($key,'&')){ $array = explode('&',$key); $str = array(); foreach ($array as $k){ $str[] = $this->parseWhereItem($k,$val); } $query = array_merge($query,$str); }else{ $str = $this->parseWhereItem($key,$val); if($operate == 'or') { $query[] = $str; }else{ $query = array_merge($query,$str); } } } } if($operate == 'or') { $return['$or'] = $query; }else{ $return = $query; } return $return; } public function parseThinkWhere($key,$val) { $query = array(); switch($key) { case '_query': parse_str($val,$query); if(isset($query['_logic']) && strtolower($query['_logic']) == 'or' ) { unset($query['_logic']); $query['$or'] = $query; } break; case '_string': $query['$where'] = new MongoCode($val); break; } return $query; } public function parseWhereItem($key,$val) { $key = strtoupper($key); $query = array(); if(is_array($val)) { if(is_string($val[0])) { $con = strtolower($val[0]); if(in_array($con,array('neq','ne','gt','egt','gte','lt','lte','elt'))) { $k = '$'.$this->comparison[$con]; $query[$key] = array($k=>$val[1]); }elseif('like'== $con){ $val[1] = str_replace('%','',$val[1]); $query[$key] = new MongoRegex("/".$val[1]."/i"); }elseif('mod'==$con){ $query[$key] = array('$mod'=>$val[1]); }elseif('regex'==$con){ $query[$key] = new MongoRegex($val[1]); }elseif(in_array($con,array('in','nin','not in'))){ $data = is_string($val[1])? explode(',',$val[1]):$val[1]; $k = '$'.$this->comparison[$con]; $query[$key] = array($k=>$data); }elseif('all'==$con){ $data = is_string($val[1])? explode(',',$val[1]):$val[1]; $query[$key] = array('$all'=>$data); }elseif('between'==$con){ $data = is_string($val[1])? explode(',',$val[1]):$val[1]; $query[$key] = array('$gte'=>$data[0],'$lte'=>$data[1]); }elseif('not between'==$con){ $data = is_string($val[1])? explode(',',$val[1]):$val[1]; $query[$key] = array('$lt'=>$data[0],'$gt'=>$data[1]); }elseif('exp'==$con){ $query['$where'] = new MongoCode($val[1]); }elseif('exists'==$con){ $query[$key] =array('$exists'=>(bool)$val[1]); }elseif('size'==$con){ $query[$key] =array('$size'=>intval($val[1])); }elseif('type'==$con){ $query[$key] =array('$type'=>intval($val[1])); }else{ $query[$key] = $val; } return $query; }else { $count = count($val); $rule = strtolower(trim($val[$count-1])); if(in_array($rule,array('or','xor'))) { $rule = $rule; $count = $count -1; }else{ for($i=0;$i<$count;$i++) { $data = is_array($val[$i])?$val[$i][1]:$val[$i]; $op = is_array($val[$i]) ? $this->comparison[strtolower($val[$i][0])] : $this->comparison['neq']; $query[$key]['$' . $op] = $data; } } return $query; } } $query[$key] = $val; return $query; } public function getMongoAutoId ($collection = 'index_auto') { $update = array('$inc' => array('id' => 1)); $query = array('table' => $collection); $command = array('findandmodify' => '_increase', 'update' => $update,'query' => $query, 'new' => true, 'upsert' => true); $rs = $this->_db->command($command); return $rs['value']['id']; } }}
namespace Component\Log{class FreeLogContainer { private $key = 'LogContainer'; private $container = array(); public function __construct() { } public function put($log,$key='error') { $this->container[$key][] = $log; return true; } public function flush() { return true; } public function get($key='error') { return isset($this->container[$key]) ? $this->container[$key] : NULL; } public function tj() { $od = $this->get('tjdata'); $data = array(); if(is_array($od)) { foreach($od as $key => $r) { $data += $r; } } } } }
namespace { FreeKernel::setConfig(array (
  'application' => 
  array (
    'Web' => 
    array (
      'version' => 'base',
      'template-path' => 'src/Web/templates/',
      'Twig_extends' => 
      array (
        'html' => 'Web\\Tags\\Twig\\WebHtmlExtension',
        'data' => 'Web\\Tags\\Twig\\WebDataExtension',
      ),
      'route' => 'index/index/init',
      'js_path' => '/portal/edu/statics/js/',
      'css_path' => '/portal/edu/statics/css/',
      'img_path' => '/portal/edu/statics/images/',
    ),
  ),
  'cache' => 
  array (
    'file' => 
    array (
      'debug' => true,
      'file_path' => 'caches/data/',
    ),
    'memcache' => 
    array (
      0 => 
      array (
        'hostname' => '10.8.6.239',
        'port' => 11211,
        'timeout' => 1,
      ),
    ),
    'mongo_db' => 
    array (
      0 => 
      array (
        'type' => 'mongo',
        'hostname' => '192.168.80.12',
        'database' => 'yledu',
        'username' => '',
        'password' => '',
        'port' => '27017',
        'autoconnect' => 0,
      ),
    ),
    'redis' => 
    array (
      0 => 
      array (
        'hostname' => '127.0.0.1',
        'port' => '6379',
        'timeout' => '0',
      ),
    ),
  ),
  'component' => 
  array (
    'db' => 'Component\\Model\\Db\\FreeMysqlDb',
  ),
  'system' => 
  array (
    'web_domain' => 'http://192.168.60.187/portal/edu/',
    'web_path' => '/portal/edu/',
    'session_ttl' => 7200,
    'session_n' => 0,
    'cookie_domain' => '',
    'cookie_path' => '/edu/',
    'cookie_pre' => 'pGClX_',
    'cookie_ttl' => 0,
    'tablepre' => 'T_',
    'upload_path' => 'I:\\htdocs\\freePHP\\upload/',
  ),
));}